{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Agentic AI Learning Plan","text":"<p>A comprehensive resource for mastering modern development workflows with agentic AI, Git, and best practices.</p>"},{"location":"#explore-the-guides","title":"Explore the Guides","text":""},{"location":"#main-guides","title":"Main Guides","text":"<ul> <li>Main AI &amp; Git Learning Plan</li> <li>Quick Git Branch &amp; PR Guide</li> <li>Portable Shell &amp; Dotfiles Guide</li> <li>Agentic AI Access Guide</li> </ul>"},{"location":"#examples","title":"Examples","text":"<ul> <li>Python Project Setup</li> <li>LAMP Stack Examples:</li> <li>With Dev Containers</li> <li>With MAMP</li> <li>Dotfiles Examples</li> </ul> <p>For project background and contribution info, see the GitHub README.</p>"},{"location":"#learning-paths-examples","title":"\ud83d\udcda Learning Paths &amp; Examples","text":"<p>Select the guide that best fits your needs:</p> <ul> <li>Main AI &amp; Git Learning Plan:   A hands-on, modular curriculum for mastering Git, AI-assisted workflows, and modern development best practices with an expert AI mentor.</li> <li>Python Project Setup:   A comprehensive guide for setting up modern Python projects with best practices and current tooling.</li> <li>LAMP Stack with Dev Containers:   Step-by-step onboarding for bringing an existing LAMP site into Git and modern workflows using VS Code devcontainers.</li> <li>LAMP Stack with MAMP:   A parallel guide for LAMP stack modernization, but using MAMP for local development instead of containers.</li> </ul>"},{"location":"#key-focus-areas","title":"Key Focus Areas","text":"<ul> <li>Setting up an optimal development environment</li> <li>Mastering Git and GitHub workflows</li> <li>Leveraging AI-assisted development effectively</li> <li>Implementing development best practices</li> <li>Security and collaboration practices</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Choose a learning path from the list above.</li> <li>Follow the progression and actionable steps in your selected guide.</li> <li>Use the provided resources and references for deeper understanding.</li> <li>Practice the concepts in your own projects.</li> </ol>"},{"location":"#structure","title":"Structure","text":"<ul> <li><code>ai-git-learning-plan.md</code> \u2013 Main AI &amp; Git curriculum</li> <li><code>python3-project-guide.md</code> \u2013 Modern Python project setup guide</li> <li><code>lamp-modernization-devcontainer.md</code> \u2013 LAMP + Devcontainer guide</li> <li><code>lamp-modernization-mamp.md</code> \u2013 LAMP + MAMP guide</li> <li><code>git-branch-pr-guide.md</code> \u2013 Quick Git workflow reference</li> <li><code>portable-shell-dotfiles.md</code> \u2013 Shell and dotfiles guide</li> <li><code>agentic-ai-access.md</code> \u2013 AI assistance guide</li> <li><code>dotfiles-examples.md</code> \u2013 Example dotfiles configurations</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! If you have suggestions for improvements or want to add content:</p> <ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Make your changes</li> <li>Submit a pull request</li> </ol> <p>Please ensure your contributions align with the existing style and structure.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License \u2013 see the LICENSE file for details.</p>"},{"location":"agentic-ai-access/","title":"Guide: Getting Access to Agentic AI in Cursor &amp; VS Code (June 2025)","text":"<p>This supplement provides up-to-date advice for individuals on how to access agentic AI features in Cursor and Microsoft VS Code, including free tiers, cost models, and tips for maximizing productivity. Enterprise and team options are summarized for reference.</p>"},{"location":"agentic-ai-access/#agentic-ai-access-guide","title":"Agentic AI Access Guide","text":"<p>This guide explains how to effectively use AI agents in your development workflow. We'll focus on best practices for interacting with AI assistants and maximizing their utility in your development process.</p>"},{"location":"agentic-ai-access/#key-concepts","title":"Key Concepts","text":"<p>When working with AI agents, it's important to understand:</p> <ol> <li>Clear Communication</li> <li>Be specific in your requests</li> <li>Provide necessary context</li> <li> <p>Ask follow-up questions when needed</p> </li> <li> <p>Effective Collaboration</p> </li> <li>Treat the AI as a pair programmer</li> <li>Review and validate suggestions</li> <li>Iterate on solutions together</li> </ol>"},{"location":"agentic-ai-access/#cursor-ide-for-individuals","title":"Cursor IDE (for Individuals)","text":"<ul> <li>How to Get Started:</li> <li>Download Cursor from cursor.com for Mac, Windows, or Linux.</li> <li>Sign up for a free account to access the Hobby (free) tier.</li> <li> <p>Activate the 14-day Pro trial for full features.</p> </li> <li> <p>Free Tier:</p> </li> <li>Basic AI autocomplete, error detection, and limited AI chat (up to 50 queries/month).</li> <li>200 code completions/month.</li> <li> <p>Great for learning, small projects, and exploring agentic AI features.</p> </li> <li> <p>Paid Plans (Individual):</p> </li> <li>Pro: $20/month \u2014 Unlimited agent requests, completions, background agents, bug bot, and max context windows.</li> <li>Ultra: $200/month \u2014 20x usage on all models, PR indexing, priority features (for power users).</li> <li> <p>See Cursor Pricing for details.</p> </li> <li> <p>Tips to Maximize Free Use:</p> </li> <li>Use the free tier for practice and personal projects.</li> <li> <p>Take advantage of the 14-day Pro trial.</p> </li> <li> <p>Productivity Advice:</p> </li> <li>Use Cursor's agent mode for multi-file changes, codebase-wide refactoring, and automated bug fixing.</li> <li> <p>Pair with free cloud dev environments (e.g., GitHub Codespaces) for zero-cost, full-stack dev.</p> </li> <li> <p>Teams/Enterprise:</p> </li> <li>Team and enterprise plans add privacy controls, admin dashboards, and SSO. See Cursor Pricing for more.</li> </ul>"},{"location":"agentic-ai-access/#microsoft-vs-code-github-copilot-for-individuals","title":"Microsoft VS Code + GitHub Copilot (for Individuals)","text":"<ul> <li>How to Get Started:</li> <li>Install VS Code and the GitHub Copilot extension.</li> <li> <p>Sign in with your GitHub account.</p> </li> <li> <p>Free Tier:</p> </li> <li>Copilot Free: 2,000 code completions/month and 50 chat messages/month.</li> <li>Available to individual developers (not orgs/enterprises).</li> <li> <p>Great for students, hobbyists, and those exploring AI coding.</p> </li> <li> <p>Paid Plans (Individual):</p> </li> <li>Copilot Pro: $10/month \u2014 Unlimited completions, premium models, 300 premium requests/month.</li> <li>Copilot Pro+: $39/month \u2014 1,500 premium requests/month, Copilot agent, all models.</li> <li>Students, teachers, and open source maintainers may qualify for free Pro access.</li> <li> <p>Copilot Plans</p> </li> <li> <p>Tips to Maximize Free Use:</p> </li> <li>Use the free tier for learning and small projects.</li> <li> <p>Try alternatives (see below) for more generous free plans.</p> </li> <li> <p>Productivity Advice:</p> </li> <li>Use Copilot's agent mode and chat for code generation, refactoring, and PR automation.</li> <li> <p>Integrate with MCP servers for advanced agentic workflows.</p> </li> <li> <p>Teams/Enterprise:</p> </li> <li>Business and enterprise plans add centralized management and advanced controls. See Copilot Plans for more.</li> </ul>"},{"location":"agentic-ai-access/#top-free-low-cost-alternatives-2025","title":"Top Free &amp; Low-Cost Alternatives (2025)","text":"<ul> <li>Bito: Free, deep codebase understanding, AI chat, code review agent, CLI integration.</li> <li>Codeium: Free for individuals, 32k context, Jupyter support, privacy controls.</li> <li>Tabnine: Free basic plan, self-hosting, privacy, multi-IDE support.</li> <li>Amazon CodeWhisperer: Unlimited free tier for individuals, strong AWS integration.</li> <li>Sourcegraph Cody: Free for open source, excels at large monorepos.</li> <li>FauxPilot, Tabby, CodeGeeX, AskCodi, Blackbox AI: Open-source or free plans, each with unique strengths.</li> <li>JetBrains AI Assistant: Deep integration for JetBrains IDEs, free and paid options.</li> <li>Replit Ghostwriter, Mutable.ai, Zed AI, Galaxy AI DevSuite: Each offers unique features, some with free tiers.</li> </ul>"},{"location":"agentic-ai-access/#general-advice-for-individuals","title":"General Advice for Individuals","text":"<ul> <li>Start with free tiers to evaluate fit and features.</li> <li>Use student/educator or open source discounts where available.</li> <li>Mix and match tools: e.g., Copilot for completions, Bito or Codeium for chat and review.</li> <li>For privacy or compliance, consider self-hosted or on-prem options (Tabnine, Cody, FauxPilot).</li> <li>Monitor usage caps to avoid surprise charges.</li> <li>For advanced agentic workflows, look for MCP (Model Context Protocol) support in your tool of choice.</li> </ul> <p>References &amp; Further Reading:</p> <ul> <li>Cursor Pricing</li> <li>GitHub Copilot Plans</li> <li>18 Free Copilot Alternatives for VS Code (Bito Blog)</li> <li>Cursor vs Copilot Comparison (Zapier, 2025)</li> <li>VS Code Copilot Setup</li> </ul>"},{"location":"ai-git-learning-plan/","title":"Agentic AI &amp; Git Learning Plan","text":"<p>A rapid, hands-on curriculum for mastering Git, AI-assisted development, and modern workflows with an expert AI mentor agent. Designed for fast progress, with deep-dive references for further exploration.</p> <p>New! See the Guide: Getting Access to Agentic AI in Cursor &amp; VS Code (June 2025) for up-to-date advice on free tiers, cost models, and maximizing productivity with agentic AI tools.</p>"},{"location":"ai-git-learning-plan/#module-1-crafting-a-frictionless-terminal-environment-with-zsh-oh-my-zsh","title":"Module 1: Crafting a Frictionless Terminal Environment with Zsh &amp; Oh-My-Zsh","text":"<ul> <li>Why Your Terminal Matters</li> <li>A smooth, powerful terminal setup saves time, reduces frustration, and makes development more enjoyable.</li> <li>Modern shells like Zsh, enhanced with Oh-My-Zsh and plugins, provide features like autosuggestions, syntax highlighting, and especially a powerful, informative prompt.</li> <li> <p>Example prompt: \"Why do developers prefer Zsh and Oh-My-Zsh over Bash?\"</p> </li> <li> <p>Making Your Zsh Environment Portable</p> </li> <li> <p>Want your 10x shell setup everywhere (local, remote, new machines)? See the Portable Shell &amp; Dotfiles Guide for best practices, example configs, and a bootstrap script.</p> </li> <li> <p>Setting Up Zsh and Oh-My-Zsh</p> </li> <li> <p>Step 1: Check Your Shell</p> <ul> <li>Zsh is the default shell on macOS since Catalina (10.15). To check your current shell, run:</li> </ul> <p><code>sh   echo $SHELL</code></p> <ul> <li>If your shell is not Zsh, you can install it and set it as default.</li> <li>Step 2: Install Zsh (if needed)</li> <li>On most systems, you can install Zsh with your package manager (e.g., <code>brew install zsh</code> on macOS, <code>sudo apt install zsh</code> on Ubuntu).</li> <li>To make Zsh your default shell, run:</li> </ul> <p><code>sh   chsh -s $(which zsh)</code></p> </li> <li> <p>Step 3: Open the Terminal in Cursor IDE</p> <ul> <li>Use the menu (View &gt; Terminal) or the shortcut (usually Ctrl+<code>or Cmd+</code> on Mac) to open a terminal inside Cursor IDE.</li> </ul> </li> <li> <p>Step 4: Install Oh-My-Zsh</p> <ul> <li>In your Cursor IDE terminal, run:</li> </ul> <p><code>sh   sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"</code></p> <ul> <li>Oh-My-Zsh makes it easy to manage plugins, themes, and your Zsh configuration.</li> <li>Example prompt: \"Guide me through installing Zsh and Oh-My-Zsh on my system.\"</li> <li>Example prompt: \"How do I make Zsh my default shell?\"</li> </ul> </li> <li> <p>Must-Have Plugins for Productivity</p> </li> <li>Task: Add plugins like zsh-autosuggestions and zsh-syntax-highlighting for a buttery smooth experience.</li> <li>Example prompt: \"Install and configure zsh-autosuggestions and zsh-syntax-highlighting.\"</li> <li> <p>Why: These plugins boost speed, reduce errors, and make your terminal a joy to use.</p> </li> <li> <p>A Prompt That Works for You: Git Integration and Context</p> </li> <li>Task: Customize your Zsh prompt to show useful information, especially Git branch/status, Python environment, and more.</li> <li>Example prompt: \"Help me set up my Zsh prompt to show the current Git branch and status.\"</li> <li>Why: A good prompt gives you instant feedback about your repo state (e.g., branch, dirty/clean, staged changes), reducing mistakes and context switching. It can also show Python virtualenv, time, and more\u2014making you more productive and less likely to make Git errors.</li> <li> <p>Example prompt: \"Explain what each part of my Zsh prompt means and how to customize it for my workflow.\"</p> </li> <li> <p>Letting the Agent Help</p> </li> <li>Task: Use the agent to explain, install, and troubleshoot your shell environment, plugins, and prompt customization.</li> <li>Example prompt: \"Explain what each Oh-My-Zsh plugin does and recommend the best ones for developers.\"</li> <li>Example prompt: \"If my Zsh config is slow or buggy, help me debug and optimize it.\"</li> <li> <p>Example prompt: \"Suggest a Zsh prompt theme or config that works well for Git workflows.\"</p> </li> <li> <p>Going Deeper: Resources &amp; Videos</p> </li> <li>Oh My Zsh Official Site</li> <li>Awesome Zsh Plugins</li> <li>Zsh Autosuggestions</li> <li>Zsh Syntax Highlighting</li> <li>Video: How to Set Up a Beautiful Zsh Terminal (YouTube)</li> <li>Video: Oh My Zsh! Productivity Tips (YouTube)</li> <li>Oh My Zsh Git Plugin</li> <li>Customizing Your Zsh Prompt (Oh My Zsh Docs)</li> </ul>"},{"location":"ai-git-learning-plan/#module-2-kickstart-your-ai-mentor-git-in-action","title":"Module 2: Kickstart \u2013 Your AI Mentor &amp; Git in Action","text":"<ul> <li>Meet Your AI Mentor</li> <li>Learn how the AI agent can guide, review, and unblock you throughout your workflow.</li> <li>Example prompt: \"What can you help me with in this project?\"</li> <li>Instant Git Setup</li> <li>Task: Initialize a new Git repository, make your first commit, and push to GitHub.</li> <li>Use the AI to walk you through each step, explain commands, and troubleshoot errors.</li> <li>Example prompt: \"Help me set up a new Git repository and push it to GitHub. Explain each step.\"</li> <li>Integrate Cursor IDE with GitHub</li> <li>Task: Connect Cursor IDE to your GitHub account and verify integration.</li> <li>Use the AI to guide you through the integration process and check your setup.</li> <li>Example prompt: \"Guide me through connecting Cursor IDE to my GitHub account.\"</li> <li>Test Your Integration with the AI Mentor</li> <li>Task: Make a test commit and push to verify everything works.</li> <li>Example prompt: \"Check if my Cursor IDE is properly connected to GitHub. Try making a test commit and push it to my repository. If there are any issues, help me fix them.\"</li> <li>Go Deeper:</li> <li>Pro Git Book</li> <li>GitHub Docs: Getting Started</li> <li>Cursor IDE Docs: GitHub Integration</li> </ul>"},{"location":"ai-git-learning-plan/#module-3-branching-iterating-and-rolling-back-fast","title":"Module 3: Branching, Iterating, and Rolling Back \u2013 Fast","text":"<ul> <li>Branching with AI</li> <li>Task: Create, switch, and merge branches for new features or experiments.</li> <li>Use the AI to suggest branch names, explain branching strategies, and automate branch creation.</li> <li>Example prompt: \"Create a new branch for a feature called 'user-auth'. Explain why and how to use branches.\"</li> <li>Iterate Rapidly</li> <li>Task: Make changes, commit, and use the AI to review and improve your code.</li> <li>Example prompt: \"Review my latest commit and suggest improvements.\"</li> <li>Rollback Mistakes</li> <li>Task: Use Git commands to reset, revert, or checkout previous states if something goes wrong.</li> <li>Use the AI to explain the difference between these commands and guide you through rollbacks.</li> <li>Example prompt: \"I made a mistake in my last commit. Should I use reset, revert, or checkout? Help me fix it.\"</li> <li>Go Deeper:</li> <li>Atlassian Git Branching Guide</li> <li>Git Reset, Revert, and Checkout</li> <li>Oh Shit, Git!?!</li> </ul>"},{"location":"ai-git-learning-plan/#module-4-ai-cursor-ide-github-integration","title":"Module 4: AI + Cursor IDE + GitHub Integration","text":"<ul> <li>Connect Everything</li> <li>Task: Ensure your GitHub repo is linked in Cursor IDE and you can see Git status, commit, push, and pull.</li> <li>Example prompt: \"Show me how to use Git features in Cursor IDE.\"</li> <li>AI-Driven Code Reviews &amp; PRs</li> <li>Task: Use the AI to review your code, suggest improvements, and help you create pull requests.</li> <li>Example prompt: \"Review my code and help me create a pull request for my latest feature.\"</li> <li>Collaborate with the AI</li> <li>Task: Use the agent to explain diffs, resolve merge conflicts, and document your changes.</li> <li>Example prompt: \"Explain the differences between these two branches and help me resolve any conflicts.\"</li> <li>Go Deeper:</li> <li>Cursor IDE Docs</li> <li>GitHub Pull Requests</li> </ul>"},{"location":"ai-git-learning-plan/#module-5-supercharge-with-model-context-protocols-mcp","title":"Module 5: Supercharge with Model Context Protocols (MCP)","text":"<ul> <li>What is MCP?</li> <li>Learn how MCP tools expand your AI's context and capabilities for smarter assistance.</li> <li>Example prompt: \"What are Model Context Protocols and how can they help me in Cursor?\"</li> <li>Hands-On: Install &amp; Use the Official Everything MCP Server</li> <li>Task: Set up the official Everything MCP Server (<code>@modelcontextprotocol/server-everything</code>) to experiment with a variety of MCP tools.</li> <li> <p>Quick Start:</p> <ol> <li>Make sure you have Node.js installed.</li> <li>Run the server with:</li> </ol> <p><code>sh    npx @modelcontextprotocol/server-everything</code></p> <ol> <li>(Optional) Integrate with VS Code by adding to <code>.vscode/mcp.json</code>:</li> </ol> <p><code>json    {      \"servers\": {        \"everything\": {          \"command\": \"npx\",          \"args\": [\"-y\", \"@modelcontextprotocol/server-everything\"]        }      }    }</code></p> <ol> <li>Explore the available tools (e.g., <code>add</code>, <code>echo</code>, <code>sampleLLM</code>, <code>printEnv</code>) and try calling them from your AI agent or IDE.</li> <li>Use the AI to guide installation, configuration, and first use.</li> <li>Example prompt: \"Walk me through installing and using the Everything MCP Server with Cursor.\"</li> <li>Enhance Your Workflow</li> <li>Task: Use MCP to search code, share context, and automate tasks with the AI.</li> <li>Example prompt: \"Use MCP to search for all functions related to authentication in my codebase.\"</li> <li>Go Deeper:</li> <li>Everything MCP Server on npm</li> <li>MCP Tools Documentation</li> <li>MCP Example Servers</li> </ol> </li> </ul>"},{"location":"ai-git-learning-plan/#module-6-real-world-project-rapid-co-development","title":"Module 6: Real-World Project \u2013 Rapid Co-Development","text":"<ul> <li>Build Something Real, Fast</li> <li>Task: Define a small project (e.g., CLI tool, web app) with the AI's help.</li> <li>Example prompt: \"Help me brainstorm and outline a simple CLI tool project.\"</li> <li>Plan, Build, and Iterate with AI</li> <li>Task: Use the AI to break down the project into tasks, create branches, and implement features step by step.</li> <li>Example prompt: \"Create a task list for this project and help me start the first feature branch.\"</li> <li>Practice Branching, Merging, and Rollbacks</li> <li>Task: Use the AI to guide you through branching, merging, and rolling back changes as you develop.</li> <li>Example prompt: \"Guide me through merging my feature branch and resolving any conflicts.\"</li> <li>Use MCP Tools to Enhance Workflow</li> <li>Task: Leverage MCP for advanced code search, context sharing, and automation.</li> <li>Example prompt: \"Show me how to use MCP to document and share project context with collaborators.\"</li> <li>Go Deeper:</li> <li>Open Source Guides</li> <li>Effective Pair Programming</li> </ul>"},{"location":"ai-git-learning-plan/#module-7-laying-the-foundation-for-a-modern-python-project","title":"Module 7: Laying the Foundation for a Modern Python Project","text":"<ul> <li>Project Structure &amp; Initialization</li> <li>Task: Create a clean project directory and initialize it in Cursor IDE.</li> <li> <p>Example prompt: \"Set up a new Python project structure in this directory, including a src/ folder and a README.md.\"</p> </li> <li> <p>Dependency Management with uv and requirements.txt</p> </li> <li>Task: Use uv (a fast, modern Python package manager) to manage dependencies.</li> <li>Example prompt: \"Install uv and use it to add requests and pytest to my project. Generate a requirements.txt file.\"</li> <li> <p>Why: uv is faster and more reliable than pip, and requirements.txt ensures reproducibility for collaborators and CI.</p> </li> <li> <p>Development Environment: Should You Use a devcontainer?</p> </li> <li>Task: Decide whether to use a devcontainer for consistent, reproducible development environments.</li> <li>Example prompt: \"Should I use a devcontainer for this project? If so, generate a .devcontainer/devcontainer.json for a Python 3.11 environment with uv and ruff pre-installed.\"</li> <li> <p>Why: Devcontainers make onboarding, CI, and cross-platform development easier and more reliable.</p> </li> <li> <p>Code Quality: Setting Up Ruff</p> </li> <li>Task: Add ruff for fast linting and code formatting.</li> <li>Example prompt: \"Install ruff and configure it for this project. Add a pyproject.toml with recommended settings.\"</li> <li> <p>Why: Ruff enforces code style and catches errors early, improving code quality and consistency.</p> </li> <li> <p>Automated Checks: Pre-commit Hooks</p> </li> <li>Task: Set up pre-commit to run ruff and other checks before every commit.</li> <li>Example prompt: \"Set up pre-commit to run ruff and black on every commit. Add a .pre-commit-config.yaml and install the hooks.\"</li> <li> <p>Why: Pre-commit ensures code quality checks are run automatically, preventing bad code from entering your repo.</p> </li> <li> <p>Letting the AI Agent Do the Heavy Lifting</p> </li> <li>Task: Use the agent to automate setup, explain configuration files, and troubleshoot issues.</li> <li>Example prompt: \"Automate the setup of uv, ruff, and pre-commit for this project. Explain what each tool does and how to use it.\"</li> <li> <p>Example prompt: \"If I get a pre-commit error, help me understand and fix it.\"</p> </li> <li> <p>Go Deeper:</p> </li> <li>uv: Fast Python Package Manager</li> <li>Ruff: Python Linter &amp; Formatter</li> <li>pre-commit: Framework for Managing Git Hooks</li> <li>Dev Containers</li> </ul>"},{"location":"ai-git-learning-plan/#module-8-automating-ci-and-testing-with-your-ai-agent","title":"Module 8: Automating CI and Testing with Your AI Agent","text":"<ul> <li>Setting Up a CI Pipeline with GitHub Actions</li> <li>Task: Automate continuous integration (CI) for your project using GitHub Actions.</li> <li>Example prompt: \"Set up a GitHub Actions workflow to run my Python tests and linting on every push and pull request.\"</li> <li>Why: CI ensures your code is automatically tested and checked for quality before merging, reducing bugs and improving reliability.</li> <li> <p>Example prompt: \"Explain what each step in the generated GitHub Actions workflow does.\"</p> </li> <li> <p>Letting the Agent Do the Heavy Lifting</p> </li> <li>Task: Use the agent to generate, configure, and troubleshoot your CI pipeline.</li> <li> <p>Example prompt: \"If my GitHub Actions workflow fails, help me debug and fix the issue.\"</p> </li> <li> <p>Writing and Maintaining Tests with the Agent</p> </li> <li>Task: Ask the agent to generate unit, integration, or end-to-end tests for your codebase.</li> <li>Example prompt: \"Write unit tests for my main.py file using pytest.\"</li> <li>Example prompt: \"Review my test coverage and suggest areas that need more tests.\"</li> <li> <p>Why: Automated tests catch bugs early, document expected behavior, and make refactoring safer. With an AI agent, writing and maintaining tests becomes much easier and less time-consuming.</p> </li> <li> <p>Why Adopt CI and Automated Testing Now?</p> </li> <li> <p>With your AI agent handling much of the setup and maintenance, there's little reason not to automate quality checks and testing. This leads to more robust, maintainable, and collaborative projects.</p> </li> <li> <p>Go Deeper:</p> </li> <li>GitHub Actions Documentation</li> <li>pytest Documentation</li> <li>Guide: Automated Testing Best Practices</li> </ul>"},{"location":"ai-git-learning-plan/#best-practices-for-prompting-cursor-style-agents","title":"Best Practices for Prompting Cursor-Style Agents","text":"<ul> <li>Be Specific and Contextual:   Clearly state your goal, provide relevant code or file references, and specify the language or framework if needed.</li> <li>Use Step-by-Step (Chain-of-Thought) Prompts:   For complex tasks, break your request into steps or ask the agent to explain its reasoning as it works.</li> <li>Give Examples (Few-Shot Prompting):   If you want a certain style or format, provide a short example in your prompt.</li> <li>Iterate and Refine:   Don't expect perfection on the first try\u2014ask follow-up questions, request clarifications, and refine your prompt as needed.</li> <li>Ask for Explanations:   If you don't understand a suggestion, ask the agent to explain its reasoning or the code it generated.</li> <li>Leverage Cursor Rules:   Use <code>.cursorrules</code> to set project-specific guidelines for the agent, such as coding style, error handling, or naming conventions.</li> <li>Review and Test AI-Generated Code:   Always review, test, and validate code before merging or deploying.</li> <li>Be Polite and Clear:   While not required, a friendly and clear tone can improve results and make collaboration smoother.</li> </ul>"},{"location":"ai-git-learning-plan/#references-further-reading","title":"References &amp; Further Reading","text":"<ul> <li>AI-Powered Coding Assistants: Best Practices (Monterail)</li> <li>Maximizing Your Cursor Use (Medium)</li> <li>Top Cursor Rules for Coding Agents (PromptHub)</li> <li>Cursor System Prompt Revealed (Pat McGuinness)</li> </ul>"},{"location":"ai-git-learning-plan/#references-further-learning","title":"References &amp; Further Learning","text":"<ul> <li>Git, GitHub, Cursor IDE, and MCP documentation</li> <li>Example repositories and exercises</li> <li>Community and support channels</li> </ul>"},{"location":"ai-git-learning-plan/#next-steps","title":"Next Steps","text":"<ul> <li>Keep building with AI and Git</li> <li>Explore advanced MCP integrations</li> <li>Contribute to open source with your new skills</li> </ul>"},{"location":"ai-git-learning-plan/#common-scenarios-and-solutions","title":"Common Scenarios and Solutions","text":"<p>Here are some common scenarios you might encounter and how to handle them using Git with AI assistance:</p>"},{"location":"ai-git-learning-plan/#working-with-branches","title":"Working with Branches","text":"<p>When starting new work:</p> <ol> <li>Create a new branch from main</li> <li>Make your changes</li> <li>Commit regularly with clear messages</li> <li>Push to remote and create PR when ready</li> </ol> <p>AI can help with:</p> <ul> <li>Generating meaningful commit messages</li> <li>Reviewing changes for potential issues</li> <li>Suggesting improvements to code quality</li> </ul>"},{"location":"dotfiles-examples/","title":"Dotfiles Example: Portable Zsh Environment","text":"<p>This guide provides examples and instructions for setting up a portable Zsh environment that you can use across different machines.</p>"},{"location":"dotfiles-examples/#example-configuration-files","title":"Example Configuration Files","text":"<p>Below are example configuration files to help you get started with a powerful, cross-platform shell setup:</p> <pre><code># Example .zshrc\n# Load Oh-My-Zsh\nexport ZSH=\"$HOME/.oh-my-zsh\"\nZSH_THEME=\"robbyrussell\"\n\n# Plugins\nplugins=(\n  git\n  zsh-autosuggestions\n  zsh-syntax-highlighting\n)\n\nsource $ZSH/oh-my-zsh.sh\n\n# Aliases\nalias g=\"git\"\nalias gst=\"git status\"\nalias gd=\"git diff\"\nalias gc=\"git commit\"\nalias gp=\"git push\"\n</code></pre> <pre><code># Example bootstrap.sh\n#!/bin/bash\nset -e\n\n# Install Oh-My-Zsh\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n\n# Install plugins\ngit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n\n# Copy config files\ncp .zshrc ~/.zshrc\n</code></pre> <pre><code># Example .gitignore for dotfiles\n.DS_Store\n*.swp\n*.swo\n.env\n.env.*\n</code></pre>"},{"location":"dotfiles-examples/#usage","title":"Usage","text":"<ol> <li>Copy these example files to your dotfiles repository</li> <li>Customize them for your needs</li> <li>Use the bootstrap script to set up a new machine</li> </ol> <p>These examples help you quickly set up a cross-platform, modular, and secure shell environment on any machine.</p>"},{"location":"git-branch-pr-guide/","title":"Quick Git Branch &amp; PR Guide","text":"<p>A concise, step-by-step guide for the most common Git workflow: creating a branch, making changes, committing, pushing, and opening a pull request (PR).</p> <ul> <li>Create a new branch:</li> <li> <p><code>git checkout -b my-feature-branch</code></p> <ul> <li>(Creates and switches to a new branch)</li> </ul> </li> <li> <p>Modify a file:</p> </li> <li> <p>Edit your file(s) as needed in your editor (e.g., VS Code, Cursor IDE, etc.)</p> </li> <li> <p>Stage your changes:</p> </li> <li> <p><code>git add &lt;filename&gt;</code></p> <ul> <li>(Or use <code>git add .</code> to stage all changes)</li> </ul> </li> <li> <p>Commit your changes:</p> </li> <li> <p><code>git commit -m \"Describe your change\"</code></p> </li> <li> <p>Push your branch to GitHub:</p> </li> <li> <p><code>git push -u origin my-feature-branch</code></p> </li> <li> <p>Open a Pull Request (PR):</p> </li> <li>Go to your repository on GitHub</li> <li>You'll see a prompt to \"Compare &amp; pull request\" for your branch\u2014click it</li> <li>Fill in the PR title and description, then click \"Create pull request\"</li> </ul> <p>Tip:</p> <p>You can also use the GitHub CLI (<code>gh</code>) to open a PR from the terminal:</p> <ul> <li><code>gh pr create --fill</code></li> </ul>"},{"location":"lamp-modernization-devcontainer/","title":"LAMP Stack Modernization with Dev Containers","text":"<pre><code>flowchart TD\n    A[\"Existing LAMP Site (Remote Server)\"]\n    B[\"Initialize Git Repo\"]\n    C[\"Connect to GitHub (SSH Keys)\"]\n    D[\"Push to GitHub\"]\n    E[\"Clone Repo Locally / in Dev Container\"]\n    F[\"Local Dev in Dev Container\"]\n    G[\"Commit &amp; Push Changes\"]\n    H[\"Pull Changes to Remote Server\"]\n    I[\"Branch for ClientA\"]\n    J[\"Branch for ClientB\"]\n    K[\"Deploy to Production\"]\n\n    A --&gt; B\n    B --&gt; C\n    C --&gt; D\n    D --&gt; E\n    E --&gt; F\n    F --&gt; G\n    G --&gt; D\n    D --&gt; H\n    H --&gt; K\n    G --&gt; I\n    G --&gt; J\n    I --&gt; G\n    J --&gt; G\n</code></pre>"},{"location":"lamp-modernization-devcontainer/#rapid-git-modern-workflow-learning-plan-lamp-stack-with-dev-containers","title":"Rapid Git &amp; Modern Workflow Learning Plan - LAMP Stack with Dev Containers","text":"<p>Audience: Developers with an existing LAMP site, not yet using Git, working over VS Code SSH remote, and needing to modernize their workflow with local development, version control, and branching.</p>"},{"location":"lamp-modernization-devcontainer/#module-1-why-version-control-and-why-now","title":"Module 1: Why Version Control? (And Why Now)","text":"<ul> <li>What you gain:   Safer changes, easy rollbacks, collaboration, and a clear history.</li> <li>Agent prompt:   \"Explain why I should use Git for my website and what problems it will solve for me.\"</li> </ul>"},{"location":"lamp-modernization-devcontainer/#module-2-setting-up-git-for-your-existing-site","title":"Module 2: Setting Up Git for Your Existing Site","text":"<ul> <li>Initialize Git in your project directory (remote or local):</li> <li><code>git init</code></li> <li>Add your files and make your first commit:</li> <li><code>git add .</code></li> <li><code>git commit -m \"Initial commit of existing site\"</code></li> <li>Agent prompt:   \"Guide me through initializing Git for my existing site and making my first commit.\"</li> </ul>"},{"location":"lamp-modernization-devcontainer/#module-3-connecting-to-github-and-ssh-key-management","title":"Module 3: Connecting to GitHub (and SSH Key Management)","text":"<ul> <li>Generate an SSH key (if needed):</li> <li><code>ssh-keygen -t ed25519 -C \"your_email@example.com\"</code></li> <li>Add your SSH key to GitHub.</li> <li>Troubleshoot SSH agent and VS Code SSH remote issues.</li> <li>Agent prompt:   \"Help me set up SSH keys so I can push to GitHub from my VS Code SSH remote session without conflicts.\"</li> </ul>"},{"location":"lamp-modernization-devcontainer/#module-4-local-development-with-dev-containers","title":"Module 4: Local Development with Dev Containers","text":"<ul> <li>Why use a dev container?   Consistent, isolated environment for LAMP stack development.</li> <li>Agent prompt:   \"Help me create a devcontainer for my LAMP stack site, even though I don't know Docker or Podman.\"</li> <li>Tasks:   Use VS Code's \"Add Dev Container Configuration\" feature.   Agent can generate a starter <code>.devcontainer/devcontainer.json</code> and <code>Dockerfile</code> for LAMP.   Test running the site locally in the container.</li> </ul>"},{"location":"lamp-modernization-devcontainer/#module-5-workflowfrom-local-to-remote","title":"Module 5: Workflow\u2014From Local to Remote","text":"<ul> <li>Recommended flow:</li> <li>Develop and test locally in the devcontainer.</li> <li>Commit and push changes to GitHub.</li> <li>Pull changes to the remote server for deployment.</li> <li>Agent prompt:   \"Show me a safe workflow for developing locally and deploying to my remote LAMP server using Git.\"</li> </ul>"},{"location":"lamp-modernization-devcontainer/#module-6-branching-for-multiple-clients","title":"Module 6: Branching for Multiple Clients","text":"<ul> <li>Create and manage branches for different clients:</li> <li><code>git checkout -b clientA</code></li> <li><code>git checkout -b clientB</code></li> <li>Agent prompt:   \"How do I keep two versions of my site for different clients using Git branches?\"</li> </ul>"},{"location":"lamp-modernization-devcontainer/#module-7-best-practices-troubleshooting","title":"Module 7: Best Practices &amp; Troubleshooting","text":"<ul> <li>.gitignore for LAMP:   Exclude <code>vendor/</code>, <code>node_modules/</code>, <code>.env</code>, etc.</li> <li>Agent prompt:   \"What should I put in my .gitignore for a LAMP stack site?\"</li> <li>Common issues:   SSH key conflicts, merge conflicts, pushing/pulling from remote.</li> </ul>"},{"location":"lamp-modernization-devcontainer/#resources-deep-dives","title":"Resources &amp; Deep Dives","text":"<ul> <li>Oh Shit, Git!?</li> <li>VS Code Remote Development Docs</li> <li>GitHub SSH Key Setup</li> <li>Dev Containers in VS Code</li> </ul> <p>Tip: At every step, use your agent to ask for explanations, troubleshooting, or to generate config files for you!</p>"},{"location":"lamp-modernization-mamp/","title":"LAMP Stack Modernization with MAMP","text":"<pre><code>flowchart TD\n    A[\"Existing LAMP Site (Remote Server)\"]\n    B[\"Initialize Git Repo\"]\n    C[\"Connect to GitHub (SSH Keys)\"]\n    D[\"Push to GitHub\"]\n    E[\"Clone Repo Locally / in MAMP\"]\n    F[\"Local Dev in MAMP\"]\n    G[\"Commit &amp; Push Changes\"]\n    H[\"Pull Changes to Remote Server\"]\n    I[\"Branch for ClientA\"]\n    J[\"Branch for ClientB\"]\n    K[\"Deploy to Production\"]\n\n    A --&gt; B\n    B --&gt; C\n    C --&gt; D\n    D --&gt; E\n    E --&gt; F\n    F --&gt; G\n    G --&gt; D\n    D --&gt; H\n    H --&gt; K\n    G --&gt; I\n    G --&gt; J\n    I --&gt; G\n    J --&gt; G\n</code></pre>"},{"location":"lamp-modernization-mamp/#rapid-git-modern-workflow-learning-plan-lamp-stack-with-mamp","title":"Rapid Git &amp; Modern Workflow Learning Plan - LAMP Stack with MAMP","text":"<p>Audience: Developers with an existing LAMP site, not yet using Git, working over VS Code SSH remote, and needing to modernize their workflow with local development (using MAMP), version control, and branching.</p>"},{"location":"lamp-modernization-mamp/#module-1-why-version-control-and-why-now","title":"Module 1: Why Version Control? (And Why Now)","text":"<ul> <li>What you gain:   Safer changes, easy rollbacks, collaboration, and a clear history.</li> <li>Agent prompt:   \"Explain why I should use Git for my website and what problems it will solve for me.\"</li> </ul>"},{"location":"lamp-modernization-mamp/#module-2-setting-up-git-for-your-existing-site","title":"Module 2: Setting Up Git for Your Existing Site","text":"<ul> <li>Initialize Git in your project directory (remote or local):</li> <li><code>git init</code></li> <li>Add your files and make your first commit:</li> <li><code>git add .</code></li> <li><code>git commit -m \"Initial commit of existing site\"</code></li> <li>Agent prompt:   \"Guide me through initializing Git for my existing site and making my first commit.\"</li> </ul>"},{"location":"lamp-modernization-mamp/#module-3-connecting-to-github-and-ssh-key-management","title":"Module 3: Connecting to GitHub (and SSH Key Management)","text":"<ul> <li>Generate an SSH key (if needed):</li> <li><code>ssh-keygen -t ed25519 -C \"your_email@example.com\"</code></li> <li>Add your SSH key to GitHub.</li> <li>Troubleshoot SSH agent and VS Code SSH remote issues.</li> <li>Agent prompt:   \"Help me set up SSH keys so I can push to GitHub from my VS Code SSH remote session without conflicts.\"</li> </ul>"},{"location":"lamp-modernization-mamp/#module-4-local-development-with-mamp","title":"Module 4: Local Development with MAMP","text":"<ul> <li>Why use MAMP?   MAMP provides a simple, local LAMP stack (Apache, MySQL, PHP) for Mac users, making it easy to run and test your site locally without containers.</li> <li>Agent prompt:   \"Help me set up MAMP for my LAMP stack site and configure it to work with my Git repository.\"</li> <li>Tasks:</li> <li>Download and install MAMP.</li> <li>Clone your GitHub repo into the MAMP <code>htdocs</code> directory (usually <code>/Applications/MAMP/htdocs</code>).</li> <li>Configure your site in MAMP (set up Apache host, database, etc. as needed).</li> <li>Test running the site locally in MAMP.</li> <li>Use your agent for troubleshooting (e.g., \"Why is my site not loading in MAMP?\").</li> </ul>"},{"location":"lamp-modernization-mamp/#module-5-workflowfrom-local-to-remote","title":"Module 5: Workflow\u2014From Local to Remote","text":"<ul> <li>Recommended flow:</li> <li>Develop and test locally in MAMP.</li> <li>Commit and push changes to GitHub.</li> <li>Pull changes to the remote server for deployment.</li> <li>Agent prompt:   \"Show me a safe workflow for developing locally in MAMP and deploying to my remote LAMP server using Git.\"</li> </ul>"},{"location":"lamp-modernization-mamp/#module-6-branching-for-multiple-clients","title":"Module 6: Branching for Multiple Clients","text":"<ul> <li>Create and manage branches for different clients:</li> <li><code>git checkout -b clientA</code></li> <li><code>git checkout -b clientB</code></li> <li>Agent prompt:   \"How do I keep two versions of my site for different clients using Git branches?\"</li> </ul>"},{"location":"lamp-modernization-mamp/#module-7-best-practices-troubleshooting","title":"Module 7: Best Practices &amp; Troubleshooting","text":"<ul> <li>.gitignore for LAMP:   Exclude <code>vendor/</code>, <code>node_modules/</code>, <code>.env</code>, etc.</li> <li>Agent prompt:   \"What should I put in my .gitignore for a LAMP stack site?\"</li> <li>Common issues:   SSH key conflicts, merge conflicts, pushing/pulling from remote, MAMP port conflicts, database import/export.</li> </ul>"},{"location":"lamp-modernization-mamp/#resources-deep-dives","title":"Resources &amp; Deep Dives","text":"<ul> <li>Oh Shit, Git!?</li> <li>VS Code Remote Development Docs</li> <li>GitHub SSH Key Setup</li> <li>MAMP Documentation</li> </ul> <p>Tip: At every step, use your agent to ask for explanations, troubleshooting, or to generate config files for you!</p>"},{"location":"portable-shell-dotfiles/","title":"Making Your Shell Environment Portable: Dotfiles, Git, and 10x Zsh Everywhere","text":"<p>A guide to ensuring your terminal is always powerful, familiar, and productive\u2014on any machine, local or remote.</p>"},{"location":"portable-shell-dotfiles/#why-portability-matters","title":"Why Portability Matters","text":"<ul> <li>A great shell setup is a superpower\u2014but only if you have it everywhere you work: local, remote, new laptops, cloud VMs, etc.</li> <li>The terminal only \"sucks\" when it's not set up right. With a portable, versioned config, you're always at home in your shell.</li> </ul>"},{"location":"portable-shell-dotfiles/#what-are-dotfiles","title":"What Are Dotfiles?","text":"<ul> <li>\"Dotfiles\" are your shell and tool config files (e.g., <code>.zshrc</code>, <code>.gitconfig</code>, <code>.vimrc</code>, etc.).</li> <li>Managing them with Git lets you:</li> <li>Instantly set up a new machine or remote server.</li> <li>Keep your config in sync everywhere.</li> <li>Experiment safely (rollback, branch, etc.).</li> <li>Share and learn from others' setups.</li> </ul>"},{"location":"portable-shell-dotfiles/#strategies-for-managing-dotfiles","title":"Strategies for Managing Dotfiles","text":""},{"location":"portable-shell-dotfiles/#1-simple-git-repo-symlink-approach","title":"1. Simple Git Repo (Symlink Approach)","text":"<ul> <li>Store your dotfiles in a Git repo (e.g., <code>~/dotfiles</code>).</li> <li>Symlink them into your home directory.</li> <li>Example:</li> </ul> <p><code>sh   ln -s ~/dotfiles/.zshrc ~/.zshrc</code></p>"},{"location":"portable-shell-dotfiles/#2-bare-git-repo-dotbare-pattern","title":"2. Bare Git Repo (\"Dotbare\" Pattern)","text":"<ul> <li>Keep your home directory as the working tree, but store the Git repo elsewhere.</li> <li>No symlinks needed; files live in <code>~</code>.</li> <li>Example setup:</li> </ul> <p><code>sh   git clone --bare git@github.com:yourname/dotfiles.git $HOME/.dotfiles   alias dotfiles='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'   dotfiles checkout</code></p>"},{"location":"portable-shell-dotfiles/#3-dotfile-managers","title":"3. Dotfile Managers","text":"<ul> <li>Tools like chezmoi, yadm, or rcm automate syncing, templating, and OS-specific config.</li> </ul>"},{"location":"portable-shell-dotfiles/#keeping-secrets-out-of-dotfiles","title":"Keeping Secrets Out of Dotfiles","text":"<ul> <li>Never commit secrets (API keys, tokens, etc.) to your dotfiles repo.</li> <li>Use <code>.gitignore</code> for local-only files (e.g., <code>.zshrc.local</code>).</li> <li>Consider tools like git-crypt or sops for encrypted secrets if needed.</li> </ul>"},{"location":"portable-shell-dotfiles/#bootstrapping-your-environment-anywhere","title":"Bootstrapping Your Environment Anywhere","text":"<ol> <li>Clone Your Dotfiles Repo</li> </ol> <p><code>sh    git clone &lt;repo-url&gt; ~/dotfiles-examples    cd ~/dotfiles-examples    ./bootstrap.sh</code></p> <ol> <li>Customize as Needed</li> <li>Add plugins, aliases, or modular configs to <code>zshrc.d/</code>.</li> <li>Place secrets in <code>.zshrc.local</code> (never commit this file).</li> </ol>"},{"location":"portable-shell-dotfiles/#making-zshrc-portable-os-ssh-detection","title":"Making <code>.zshrc</code> Portable: OS &amp; SSH Detection","text":"<p>See <code>dotfiles-examples/.zshrc</code> for a full example.</p> <p>OS Detection Example:</p> <pre><code>if [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n  export OS_TYPE=\"macos\"\nelif [[ \"$OSTYPE\" == \"linux-gnu\"* ]]; then\n  export OS_TYPE=\"linux\"\nfi\n</code></pre> <p>SSH Session Detection Example:</p> <pre><code>if [[ -n \"$SSH_CONNECTION\" ]]; then\n  export IS_SSH=\"1\"\n  # Optionally disable heavy plugins, change prompt, etc.\nfi\n</code></pre> <p>Conditional Plugin Loading Example:</p> <pre><code>if [[ \"$OS_TYPE\" == \"macos\" ]]; then\n  # macOS-specific plugins or paths\nelif [[ \"$OS_TYPE\" == \"linux\" ]]; then\n  # Linux-specific plugins or paths\nfi\n</code></pre>"},{"location":"portable-shell-dotfiles/#syncing-to-remote-servers","title":"Syncing to Remote Servers","text":"<ul> <li>SSH into your remote box.</li> <li>Clone your dotfiles repo and run your bootstrap/install script.</li> <li>Use SSH detection in <code>.zshrc</code> to adjust your environment (e.g., lighter prompt, fewer plugins).</li> </ul>"},{"location":"portable-shell-dotfiles/#example-reference-dotfiles","title":"Example: Reference Dotfiles","text":"<ul> <li>See the <code>dotfiles-examples/</code> directory in this repo for a real-world, cross-platform, SSH-aware setup.</li> <li>Features:</li> <li>OS and SSH detection in <code>.zshrc</code></li> <li>Modular config (split into <code>zshrc.d/</code>)</li> <li>Bootstrap script for new machines</li> <li><code>.gitignore</code> for secrets/local overrides</li> </ul>"},{"location":"portable-shell-dotfiles/#agent-prompts","title":"Agent Prompts","text":"<ul> <li>\"Help me set up a dotfiles repo for my shell config.\"</li> <li>\"How do I sync my Zsh setup to a remote server?\"</li> <li>\"Show me how to detect SSH or OS in my .zshrc.\"</li> <li>\"What's the best way to keep secrets out of my dotfiles?\"</li> </ul>"},{"location":"portable-shell-dotfiles/#resources","title":"Resources","text":"<ul> <li>chezmoi (dotfile manager)</li> <li>yadm (dotfile manager)</li> <li>Thoughtbot: Managing Your Dotfiles</li> <li>GitHub: Awesome Dotfiles</li> </ul> <p>Tip: A portable shell is a force multiplier. Invest in your dotfiles and you'll always feel at home in the terminal\u2014anywhere.</p>"},{"location":"python3-project-guide/","title":"Modern Python Project Setup Guide","text":"<p>This guide demonstrates how to set up a modern Python project using best practices and current tooling.</p>"},{"location":"python3-project-guide/#project-structure","title":"Project Structure","text":"<p>A well-organized Python project typically follows this structure:</p> <pre><code>your-project/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 your_package/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 main.py\n\u251c\u2500\u2500 tests/\n\u2502   \u2514\u2500\u2500 test_basic.py\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 .pre-commit-config.yaml\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"python3-project-guide/#setup-steps","title":"Setup Steps","text":"<ol> <li>Create Virtual Environment</li> </ol> <p><code>bash    python3 -m venv .venv    source .venv/bin/activate  # On Unix/macOS    # or    .venv\\Scripts\\activate  # On Windows</code></p> <ol> <li>Install Modern Build Tools</li> </ol> <p><code>bash    curl -LsSf https://astral.sh/uv/install.sh | sh</code></p> <ol> <li>Configure Project Metadata (pyproject.toml)</li> </ol> <p>```toml    [project]    name = \"your-package\"    version = \"0.1.0\"    description = \"Your project description\"    authors = [        {name = \"Your Name\", email = \"your.email@example.com\"}    ]    dependencies = [        \"requests&gt;=2.31.0\",        # Add your dependencies here    ]</p> <p>[build-system]    requires = [\"hatchling\"]    build-backend = \"hatchling.build\"    ```</p> <ol> <li>Set Up Pre-commit Hooks</li> </ol> <p>Create a <code>.pre-commit-config.yaml</code> file:</p> <p><code>yaml    repos:      - repo: https://github.com/pre-commit/pre-commit-hooks        rev: v4.5.0        hooks:          - id: trailing-whitespace          - id: end-of-file-fixer          - id: check-yaml          - id: check-added-large-files      - repo: https://github.com/psf/black        rev: 24.2.0        hooks:          - id: black      - repo: https://github.com/charliermarsh/ruff-pre-commit        rev: v0.3.0        hooks:          - id: ruff            args: [--fix]</code></p> <ol> <li>Install Development Dependencies</li> </ol> <p><code>bash    uv pip install pre-commit black ruff pytest    pre-commit install</code></p>"},{"location":"python3-project-guide/#best-practices","title":"Best Practices","text":"<ol> <li>Dependency Management</li> <li>Use <code>uv</code> for faster, more reliable package management</li> <li>Pin your dependencies in requirements.txt</li> <li> <p>Use pyproject.toml for project metadata</p> </li> <li> <p>Code Quality</p> </li> <li>Use pre-commit hooks for consistent code formatting</li> <li>Run tests before committing</li> <li> <p>Follow PEP 8 style guidelines</p> </li> <li> <p>Testing</p> </li> <li>Write tests using pytest</li> <li>Aim for high test coverage</li> <li> <p>Use fixtures for test setup</p> </li> <li> <p>Documentation</p> </li> <li>Write clear docstrings</li> <li>Maintain a comprehensive README</li> <li>Document API changes</li> </ol>"},{"location":"python3-project-guide/#example-code","title":"Example Code","text":""},{"location":"python3-project-guide/#basic-package-structure","title":"Basic Package Structure","text":"<pre><code># src/your_package/__init__.py\n\"\"\"Your package description.\"\"\"\n\n__version__ = \"0.1.0\"\n</code></pre> <pre><code># src/your_package/main.py\n\"\"\"Main module for your package.\"\"\"\n\ndef hello_world():\n    \"\"\"Return a friendly greeting.\"\"\"\n    return \"Hello, World!\"\n</code></pre> <pre><code># tests/test_basic.py\n\"\"\"Basic test module.\"\"\"\n\nfrom your_package.main import hello_world\n\ndef test_hello_world():\n    \"\"\"Test the hello_world function.\"\"\"\n    assert hello_world() == \"Hello, World!\"\n</code></pre>"},{"location":"python3-project-guide/#running-tests","title":"Running Tests","text":"<pre><code>pytest tests/\n</code></pre>"},{"location":"python3-project-guide/#building-and-publishing","title":"Building and Publishing","text":"<ol> <li>Build your package:</li> </ol> <p><code>bash    python -m build</code></p> <ol> <li>Publish to PyPI (if desired):</li> </ol> <p><code>bash    python -m twine upload dist/*</code></p>"},{"location":"python3-project-guide/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<ol> <li>Virtual Environment Issues</li> <li>Always activate your virtual environment before installing packages</li> <li> <p>Use <code>uv</code> for faster, more reliable package management</p> </li> <li> <p>Import Issues</p> </li> <li>Ensure your package is installed in development mode</li> <li> <p>Check your PYTHONPATH if needed</p> </li> <li> <p>Pre-commit Hook Issues</p> </li> <li>Run <code>pre-commit clean</code> to reset the hooks</li> <li>Update hooks with <code>pre-commit autoupdate</code></li> </ol>"}]}